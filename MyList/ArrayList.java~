public class ArrayList<E> implements List<E> {

	// instance variables
	private final int CAPACITY; // array capacity
	private E[] data; // generic array used for storage
	private int size; // current number of elements

	// constructors
	// Will generate compiler warnings regarding unsafe operations
	// Creates a default ArrayList with a capacity of 16 elements
	public ArrayList() {
		this(16);
	}

	public ArrayList(int capacity) {
		CAPACITY = capacity;
		data = (E[]) (new Object[capacity]);
		size = 0;
	}

	// returns the number of elements in the list
	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	// O(1)
	@Override
	public boolean add(E value) throws IllegalStateException {
		if (size() == CAPACITY) {
			resize(CAPACITY * 2);
		}
		data[size++] = value;
		return true;
	}

	// O(1)
	@Override
	public E get(int i) throws IndexOutOfBoundsException {
		if (i < 0 || i >= size()) {
			throw new IndexOutOfBoundsException("Index out of bounds");
		}
		return data[i];
	}

	// O(1)
	@Override
	public E set(int i, E value) throws IndexOutOfBoundsException {
		E ans = get(i);
		data[i] = value;
		return ans;
	}

	// O(n)
	@Override
	public E remove(int i) throws IndexOutOfBoundsException {
		E ans = get(i);
		for (int x = i; x < size() - 1; x++) {
			set(x, get(x + 1));
		}
		data[size() - 1] = null;
		size--;
		return ans;
	}

	@Override
	public void add(int i, E value) throws IndexOutOfBoundsException, IllegalStateException {
		if (size() == CAPACITY)
			resize(CAPACITY * 2);
		if (i < 0 || i >= size()) {
			throw new IndexOutOfBoundsException("Index out of bounds");
		}
		size++;
		for (int x = size() - 1; x > i; x--) {
			set(x, get(x - 1));
		}
		set(i, value);
	}

	// pre: newCapacity > data.length
	// post: data[] is resized and contains all the items
	// of the list.
	private void resize(int newCapacity) {
		E[] b = (E[]) (new Object[newCapacity]);
		for (int k = 0; k < size(); k++) {
			b[k] = data[k];
		}
		data = b;
	}

	@Override
	public String toString() {
		String ans = "[";
		for (int i = 0; i < size(); i++) {
			ans += data[i] + ",";
		}
		if (!(isEmpty()))
			ans = ans.substring(0, ans.length() - 1);
		ans += "]";
		return ans;
	}

	public static void main(String[] args) {
		ArrayList<String> list = new ArrayList<String>();
		System.out.println(list);
		String s = "abcdefghijklmnop";
		// O(n)
		for (int i = 0; i < s.length(); i++) {
			list.add(s.substring(i, i + 1));
			System.out.println(list);
		}
		System.out.println();
		for (int i = 0; i < 16; i++) {
			System.out.println(i + ": " + list.get(i));
		}
		System.out.println();
		System.out.println("Before swap: " + list);
		list.set(0, list.set(1, list.get(0)));
		System.out.println("After swap: " + list);
		System.out.println();
		list.set(0, list.set(1, "b"));
		System.out.println("Before removing: " + list);
		for (int i = 1; i < list.size(); i++) {
			System.out.println("remove: " + list.remove(i));
			System.out.println("list: " + list);
		}
		System.out.println();
		System.out.println("Before inserting: " + list);
		for (int i = 1; i < list.size(); i += 2) {
			System.out.println("insert : " + s.substring(i, i + 1));
			list.add(i, s.substring(i, i + 1));
			System.out.println("list : " + list);
		}
		System.out.println("insert : p");
		list.add("p");
		System.out.println("list : " + list);
	}

}
