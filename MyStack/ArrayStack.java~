import java.util.EmptyStackException;

public class ArrayStack<E> implements MyStack<E> {

    // instance variables
    private E[] stack;
    private final int CAPACITY;
    private int top; // the index of the value at the top

    // constructor
    public ArrayStack(int cap) {
        stack = (E[]) (new Object[cap]);
        CAPACITY = cap;
        top = -1;
    }

    public boolean empty() {
        return top == -1;
    }

    public int size() {
        return top + 1;
    }

    public void push(E val){
        if (size() == CAPACITY) throw new FullStackException("Stack is full");
        stack[++top] = val;
    }

    public E pop(){
        if (empty()) throw new EmptyStackException();
        E popped = stack[top];
        stack[top--] = null;
        return popped;
    }

    public E peek(){
        if (empty()) throw new EmptyStackException();
        return stack[top];
    }

    @Override
    public String toString() {
        String ans = "[ ";
        for (E val : stack) {
            ans += val + ", ";
        }
        ans = ans.substring(0, ans.length() - 2);
        ans += " ]";
        return ans;
    }

    public static void main(String[] args) {
        ArrayStack<String> s = new ArrayStack<String>(3);
        System.out.println(s);
        System.out.println("empty: " + s.empty());
        s.push("4");
        s.push("5");
        s.push("6");
        System.out.println(s);
        System.out.println("empty: " + s.empty());
        System.out.println("pop: " + s.pop());
        System.out.println(s);
        System.out.println("peek: " + s.peek());
        System.out.println(s);
        System.out.println("empty: " + s.empty());
    }

}
